
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /project/openlane/UART/../../caravel/verilog/rtl/defines.v
Parsing SystemVerilog input from `/project/openlane/UART/../../caravel/verilog/rtl/defines.v' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /project/openlane/UART/../../verilog/rtl/UART/transmitter_top_module.v
Parsing SystemVerilog input from `/project/openlane/UART/../../verilog/rtl/UART/transmitter_top_module.v' to AST representation.
Generating RTLIL representation for module `\transmitter'.
/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:44: Warning: Identifier `\stop_controlling_signals' is implicitly declared.
Note: Assuming pure combinatorial block at /project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55.2-207.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\uart_baud_generator2'.
/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:0: Warning: Ignoring call to system task $monitor.
Generating RTLIL representation for module `\transmitter_top_module'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/project/openlane/UART/runs/UART/tmp/synthesis/hierarchy.dot'.
Dumping module transmitter_top_module to page 1.

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \transmitter_top_module
Used module:     \uart_baud_generator2
Used module:     \transmitter

4.2. Analyzing design hierarchy..
Top module:  \transmitter_top_module
Used module:     \uart_baud_generator2
Used module:     \transmitter
Removed 0 unused modules.

5. Executing TRIBUF pass.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \transmitter_top_module
Used module:     \uart_baud_generator2
Used module:     \transmitter

6.1.2. Analyzing design hierarchy..
Top module:  \transmitter_top_module
Used module:     \uart_baud_generator2
Used module:     \transmitter
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50 in module uart_baud_generator2.
Marked 1 switch rules as full_case in process $proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:23$48 in module uart_baud_generator2.
Marked 25 switch rules as full_case in process $proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3 in module transmitter.
Marked 1 switch rules as full_case in process $proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1 in module transmitter.
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 18 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:19$66'.
  Set init value: \counter = 0
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:18$65'.
  Set init value: \divisor_count = 14'00000000000000
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:17$64'.
  Set init value: \divisor = 14'00000000000000
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:16$63'.
  Set init value: \number_of_pulses_per_bit = 14'00000000000000
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:15$62'.
  Set init value: \the_Baud_Rate_counter = 0
Found init rule in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:12$61'.
  Set init value: \sampling_pulse = 4'0000
Found init rule in `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:31$46'.
  Set init value: \temp = 2'00
Found init rule in `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:30$45'.
  Set init value: \index = 4'0000

6.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:23$48'.

6.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:19$66'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:18$65'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:17$64'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:16$63'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:15$62'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:12$61'.
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
     1/12: $2\counter[31:0]
     2/12: $2\divisor_count[13:0]
     3/12: $2\sampling_pulse[3:0]
     4/12: $2\divisor[13:0]
     5/12: $2\next_state[2:0]
     6/12: $1\next_state[2:0]
     7/12: $1\counter[31:0]
     8/12: $1\sampling_pulse[3:0]
     9/12: $1\divisor_count[13:0]
    10/12: $1\divisor[13:0]
    11/12: $0\number_of_pulses_per_bit[13:0]
    12/12: $0\the_Baud_Rate_counter[31:0]
Creating decoders for process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:23$48'.
     1/1: $1\current_state[2:0]
Creating decoders for process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:32$47'.
Creating decoders for process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:31$46'.
Creating decoders for process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:30$45'.
Creating decoders for process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3'.
     1/13: $9\next_state[4:0]
     2/13: $8\next_state[4:0]
     3/13: $7\next_state[4:0]
     4/13: $6\next_state[4:0]
     5/13: $5\next_state[4:0]
     6/13: $4\next_state[4:0]
     7/13: $3\next_state[4:0]
     8/13: $2\next_state[4:0]
     9/13: $4\TX[0:0]
    10/13: $3\TX[0:0]
    11/13: $1\next_state[4:0]
    12/13: $0\temp[1:0]
    13/13: $0\index[3:0]
Creating decoders for process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1'.
     1/2: $0\current_state[4:0]
     2/2: $1\TX[0:0]

6.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\transmitter.\number_of_data_bits' from process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:32$47'.
Latch inferred for signal `\transmitter.\TX' from process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3': $auto$proc_dlatch.cc:430:proc_dlatch$745
Latch inferred for signal `\transmitter.\index' from process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3': $auto$proc_dlatch.cc:430:proc_dlatch$760
Latch inferred for signal `\transmitter.\temp' from process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3': $auto$proc_dlatch.cc:430:proc_dlatch$787
Latch inferred for signal `\transmitter.\next_state' from process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3': $auto$proc_dlatch.cc:430:proc_dlatch$804

6.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart_baud_generator2.\sampling_pulse' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$805' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\next_state' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$806' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\the_Baud_Rate_counter' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$807' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\number_of_pulses_per_bit' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$808' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\divisor' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$809' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\divisor_count' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$810' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\counter' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
  created $dff cell `$procdff$811' with positive edge clock.
Creating register for signal `\uart_baud_generator2.\current_state' using process `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:23$48'.
  created $adff cell `$procdff$812' with positive edge clock and negative level reset.
Creating register for signal `\transmitter.\TX' using process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1'.
  created $dff cell `$procdff$813' with positive edge clock.
Creating register for signal `\transmitter.\current_state' using process `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1'.
  created $dff cell `$procdff$814' with positive edge clock.

6.2.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:19$66'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:18$65'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:17$64'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:16$63'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:15$62'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:12$61'.
Found and cleaned up 5 empty switches in `\uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:36$50'.
Removing empty process `uart_baud_generator2.$proc$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:23$48'.
Removing empty process `transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:32$47'.
Removing empty process `transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:31$46'.
Removing empty process `transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:30$45'.
Found and cleaned up 26 empty switches in `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3'.
Removing empty process `transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:55$3'.
Found and cleaned up 1 empty switch in `\transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1'.
Removing empty process `transmitter.$proc$/project/openlane/UART/../../verilog/rtl/UART/transmitter.v:46$1'.
Cleaned up 32 empty switches.

6.3. Executing FLATTEN pass (flatten design).
Deleting now unused module uart_baud_generator2.
Deleting now unused module transmitter.
<suppressed ~2 debug messages>

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.
<suppressed ~171 debug messages>

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Removed 31 unused cells and 333 unused wires.
<suppressed ~33 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
checking module transmitter_top_module..
Warning: multiple conflicting drivers for transmitter_top_module.\u1.TX:
    port Q[0] of cell $flatten\u1.$auto$proc_dlatch.cc:430:proc_dlatch$745 ($dlatch)
    port Q[0] of cell $flatten\u1.$procdff$813 ($dff)
found and reported 1 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\u2.$procmux$70.
    dead port 2/2 on $mux $flatten\u2.$procmux$76.
    dead port 2/2 on $mux $flatten\u2.$procmux$82.
    dead port 2/2 on $mux $flatten\u2.$procmux$89.
Removed 4 multiplexer ports.
<suppressed ~11 debug messages>

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
    New ctrl vector for $pmux cell $flatten\u1.$procmux$289: { $flatten\u1.$procmux$275_CMP $flatten\u1.$procmux$346_CMP $flatten\u1.$procmux$312_CMP }
    New ctrl vector for $mux cell $flatten\u1.$procmux$324: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$330: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$336: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$342: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$435: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$441: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$447: { }
    New ctrl vector for $mux cell $flatten\u1.$procmux$453: { }
    New ctrl vector for $pmux cell $flatten\u2.$procmux$108: { $flatten\u2.$procmux$113_CMP $auto$opt_reduce.cc:134:opt_mux$816 }
  Optimizing cells in module \transmitter_top_module.
Performed a total of 10 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $flatten\u2.$procdff$812 ($adff) from module transmitter_top_module.

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Removed 0 unused cells and 54 unused wires.
<suppressed ~1 debug messages>

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.
<suppressed ~4 debug messages>

6.7.9. Rerunning OPT passes. (Maybe there is more to do..)

6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/3 on $pmux $flatten\u2.$procmux$108.
    dead port 1/2 on $mux $flatten\u2.$procmux$111.
    dead port 2/2 on $mux $flatten\u2.$procmux$111.
    dead port 1/2 on $mux $flatten\u2.$procmux$130.
    dead port 2/2 on $mux $flatten\u2.$procmux$130.
    dead port 1/2 on $mux $flatten\u2.$procmux$132.
    dead port 2/2 on $mux $flatten\u2.$procmux$132.
    dead port 1/2 on $mux $flatten\u2.$procmux$140.
    dead port 2/2 on $mux $flatten\u2.$procmux$140.
    dead port 1/2 on $mux $flatten\u2.$procmux$142.
    dead port 2/2 on $mux $flatten\u2.$procmux$142.
    dead port 1/2 on $mux $flatten\u2.$procmux$87.
    dead port 2/2 on $mux $flatten\u2.$procmux$87.
Removed 13 multiplexer ports.
<suppressed ~7 debug messages>

6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.7.13. Executing OPT_DFF pass (perform DFF optimizations).

6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Removed 10 unused cells and 17 unused wires.
<suppressed ~11 debug messages>

6.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.7.16. Rerunning OPT passes. (Maybe there is more to do..)

6.7.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

6.7.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.7.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.7.20. Executing OPT_DFF pass (perform DFF optimizations).
Handling D = Q on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module (removing D path).
Setting constant 0-bit at position 0 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 1 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 2 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 3 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 4 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 5 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 6 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 7 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 8 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 9 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 10 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 11 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 12 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.
Setting constant 0-bit at position 13 on $flatten\u2.$procdff$809 ($dff) from module transmitter_top_module.

6.7.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.7.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.
<suppressed ~1 debug messages>

6.7.23. Rerunning OPT passes. (Maybe there is more to do..)

6.7.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

6.7.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.7.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.7.27. Executing OPT_DFF pass (perform DFF optimizations).

6.7.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.7.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.7.30. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\u2.$procdff$810 ($dff) from module transmitter_top_module (D = $flatten\u2.$2\divisor_count[13:0], Q = \u2.divisor_count).
Adding SRST signal on $auto$opt_dff.cc:764:run$817 ($dffe) from module transmitter_top_module (D = $flatten\u2.$add$/project/openlane/UART/../../verilog/rtl/UART/baud_rate_generator_block.v:75$60_Y [13:0], Q = \u2.divisor_count, rval = 14'00000000000001).
Adding EN signal on $flatten\u2.$procdff$805 ($dff) from module transmitter_top_module (D = $flatten\u2.$0\sampling_pulse[3:0], Q = \u2.sampling_pulse).
Adding SRST signal on $flatten\u1.$procdff$814 ($dff) from module transmitter_top_module (D = \u1.next_state, Q = \u1.current_state, rval = 5'00001).
Adding EN signal on $flatten\u1.$procdff$813 ($dff) from module transmitter_top_module (D = 1'1, Q = \u1.TX).
Setting constant 1-bit at position 0 on $auto$opt_dff.cc:764:run$827 ($dffe) from module transmitter_top_module.

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Warning: Driver-driver conflict for \u1.TX between cell $flatten\u1.$auto$proc_dlatch.cc:430:proc_dlatch$745.Q and constant 1'1 in transmitter_top_module: Resolved using constant.
Removed 129 unused cells and 125 unused wires.
<suppressed ~132 debug messages>

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.9.9. Rerunning OPT passes. (Maybe there is more to do..)

6.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.9.13. Executing OPT_DFF pass (perform DFF optimizations).

6.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.9.16. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module transmitter_top_module:
  created 0 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.15.9. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.
<suppressed ~17 debug messages>

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~67 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\transmitter_top_module' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

6.24.3. Executing OPT_DFF pass (perform DFF optimizations).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \transmitter_top_module

6.25.2. Analyzing design hierarchy..
Top module:  \transmitter_top_module
Removed 0 unused modules.

6.26. Printing statistics.

=== transmitter_top_module ===

   Number of wires:                 29
   Number of wire bits:            368
   Number of public wires:          29
   Number of public wire bits:     368
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

6.27. Executing CHECK pass (checking for obvious problems).
checking module transmitter_top_module..
found and reported 0 problems.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \transmitter_top_module..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \transmitter_top_module.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\transmitter_top_module'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module transmitter_top_module.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Removed 0 unused cells and 24 unused wires.
<suppressed ~24 debug messages>

10. Printing statistics.

=== transmitter_top_module ===

   Number of wires:                  5
   Number of wire bits:             98
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module transmitter_top_module..
  Treeifying 0 MUXes:
    Finished treeification: Found 0 trees.
  Covering trees:
  Added a total of 0 decoder MUXes.
<suppressed ~1 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/mariam/mabrains/openlane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\transmitter_top_module':

21. Printing statistics.

=== transmitter_top_module ===

   Number of wires:                  5
   Number of wire bits:             98
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\transmitter_top_module' to `/tmp/yosys-abc-t7gJj7/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \transmitter_top_module..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).

28. Executing CHECK pass (checking for obvious problems).
checking module transmitter_top_module..
Warning: Wire transmitter_top_module.\TX is used but has no driver.
found and reported 1 problems.

29. Printing statistics.

=== transmitter_top_module ===

   Number of wires:                  5
   Number of wire bits:             98
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     sky130_fd_sc_hd__conb_1         1

   Chip area for module '\transmitter_top_module': 3.753600

30. Executing Verilog backend.
Dumping module `\transmitter_top_module'.

Warnings: 5 unique messages, 5 total
End of script. Logfile hash: b44fc3c2b5, CPU: user 0.71s system 0.03s, MEM: 44.18 MB peak
Yosys 0.9+3621 (git sha1 84e9fa7, gcc 8.3.1 -fPIC -Os)
Time spent: 42% 4x stat (0 sec), 20% 1x dfflibmap (0 sec), ...
